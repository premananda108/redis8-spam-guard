#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∞–º–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ
"""

import asyncio
import aiohttp
import json
import time
from typing import List, Dict
from datetime import datetime
import random
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich.layout import Layout
from rich.live import Live
import sys

console = Console()

class DemoSpamClassifier:
    def __init__(self, api_url: str = "http://localhost:8000"):
        self.api_url = api_url
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def classify_post(self, post: Dict) -> Dict:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ API"""
        async with self.session.post(f"{self.api_url}/classify", json=post) as response:
            if response.status == 200:
                return await response.json()
            else:
                return {"error": f"HTTP {response.status}"}
    
    async def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            async with self.session.get(f"{self.api_url}/stats") as response:
                if response.status == 200:
                    return await response.json()
                else:
                    return {"error": f"HTTP {response.status}"}
        except:
            return {"total_classified": 0, "spam_detected": 0}
    
    async def fetch_dev_to_posts(self, count: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å dev.to –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        posts = []
        
        try:
            async with self.session.get(f"https://dev.to/api/articles?per_page={count}") as response:
                if response.status == 200:
                    return await response.json()
        except Exception as e:
            console.print(f"[red]–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å dev.to: {e}[/red]")
        
        # Fallback: –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        return self.get_demo_posts()
    
    def get_demo_posts(self) -> List[Dict]:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞"""
        return [
            {
                "id": 1001,
                "title": "Complete Guide to Python FastAPI in 2024",
                "description": "Learn how to build modern APIs with FastAPI, including async programming, database integration, and testing",
                "tag_list": ["python", "fastapi", "api", "tutorial"],
                "reading_time_minutes": 12,
                "public_reactions_count": 145,
                "comments_count": 23,
                "user": {"followers_count": 890},
                "url": "https://dev.to/example/fastapi-guide",
                "published_at": "2024-01-20T10:00:00Z"
            },
            {
                "id": 1002,
                "title": "üöÄ EARN $5000/MONTH CODING - NO EXPERIENCE NEEDED!!!",
                "description": "Make money fast with this secret coding method! Click here now!",
                "tag_list": ["money", "earn", "coding", "profit", "investment", "business", "startup", "freelance"],
                "reading_time_minutes": 2,
                "public_reactions_count": 3,
                "comments_count": 0,
                "user": {"followers_count": 12},
                "url": "https://dev.to/spam/earn-money",
                "published_at": "2024-01-22T15:30:00Z"
            },
            {
                "id": 1003,
                "title": "Understanding React Hooks: useState and useEffect",
                "description": "A comprehensive tutorial on React hooks with practical examples and best practices",
                "tag_list": ["react", "javascript", "hooks", "frontend"],
                "reading_time_minutes": 8,
                "public_reactions_count": 67,
                "comments_count": 12,
                "user": {"followers_count": 456},
                "url": "https://dev.to/example/react-hooks",
                "published_at": "2024-01-21T14:20:00Z"
            },
            {
                "id": 1004,
                "title": "BUY CRYPTO NOW!!! LIMITED TIME OFFER üî•üî•üî•",
                "description": "Get rich quick with crypto trading bot",
                "tag_list": ["crypto", "bitcoin", "trading", "money", "investment", "profit", "rich"],
                "reading_time_minutes": 1,
                "public_reactions_count": 1,
                "comments_count": 0,
                "user": {"followers_count": 5},
                "url": "https://dev.to/spam/crypto",
                "published_at": "2024-01-22T16:45:00Z"
            },
            {
                "id": 1005,
                "title": "Docker Best Practices for Development",
                "description": "Learn how to optimize your Docker workflow with multi-stage builds, layer caching, and security practices",
                "tag_list": ["docker", "devops", "containers", "development"],
                "reading_time_minutes": 15,
                "public_reactions_count": 89,
                "comments_count": 18,
                "user": {"followers_count": 634},
                "url": "https://dev.to/example/docker-practices",
                "published_at": "2024-01-19T09:15:00Z"
            }
        ]

def create_demo_layout():
    """–°–æ–∑–¥–∞–Ω–∏–µ layout –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    layout = Layout()
    
    layout.split_column(
        Layout(name="header", size=3),
        Layout(name="main"),
        Layout(name="footer", size=7)
    )
    
    layout["main"].split_row(
        Layout(name="results"),
        Layout(name="stats", ratio=1)
    )
    
    return layout

def format_classification_result(post: Dict, result: Dict) -> Table:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    table = Table(title=f"üìù –ü–æ—Å—Ç #{post['id']}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if result.get("error"):
        color = "red"
        status = "‚ùå –û–®–ò–ë–ö–ê"
    elif result["is_spam"]:
        color = "red"
        status = "üö´ –°–ü–ê–ú"
    else:
        color = "green"
        status = "‚úÖ –õ–ï–ì–ò–¢–ò–ú–ù–´–ô"
    
    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="bold")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ")
    
    table.add_row("–ó–∞–≥–æ–ª–æ–≤–æ–∫", post["title"][:50] + "..." if len(post["title"]) > 50 else post["title"])
    table.add_row("–¢–µ–≥–∏", ", ".join(post["tag_list"][:3]))
    table.add_row("–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è", f"{post['reading_time_minutes']} –º–∏–Ω")
    table.add_row("–†–µ–∞–∫—Ü–∏–∏", str(post["public_reactions_count"]))
    
    if not result.get("error"):
        table.add_row("–°—Ç–∞—Ç—É—Å", f"[{color}]{status}[/{color}]")
        table.add_row("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result['confidence']:.1%}")
        table.add_row("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", result['recommendation'].upper())
        table.add_row("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result['processing_time_ms']:.1f}ms")
        
        if result.get("reasoning"):
            table.add_row("–ü—Ä–∏—á–∏–Ω—ã", "\n".join(result["reasoning"][:2]))
    
    return table

def create_stats_panel(stats: Dict, processed: int, spam_found: int) -> Panel:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    content = f"""
üìä [bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏[/bold]

üîç –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: [green]{processed}[/green]
üö´ –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–º–∞: [red]{spam_found}[/red]
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞: [yellow]{spam_found/max(processed,1)*100:.1f}%[/yellow]

üíæ [bold]–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã[/bold]
üìù –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('total_classified', 0)}
üö´ –°–ø–∞–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {stats.get('spam_detected', 0)}
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}
    """
    
    return Panel(content, title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", border_style="blue")

async def run_interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    console.clear()
    console.print(Panel.fit(
        "[bold blue]üöÄ Dev.to Spam Classifier Demo[/bold blue]\n"
        "[dim]–°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ø–∞–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis 8 Vector Sets[/dim]",
        border_style="blue"
    ))
    
    async with DemoSpamClassifier() as classifier:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        with console.status("[bold green]–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API..."):
            stats = await classifier.get_stats()
            if stats.get("error"):
                console.print("[red]‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000[/red]")
                return
        
        console.print("[green]‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω![/green]\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        with console.status("[bold green]–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏..."):
            posts = await classifier.fetch_dev_to_posts(10)
        
        console.print(f"[green]üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤[/green]\n")
        
        # –°–æ–∑–¥–∞–µ–º layout –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        layout = create_demo_layout()
        processed_count = 0
        spam_count = 0
        results = []
        
        with Live(layout, refresh_per_second=4) as live:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            layout["header"].update(Panel(
                "[bold blue]ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏[/bold blue]",
                border_style="blue"
            ))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
            for i, post in enumerate(posts):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                layout["footer"].update(Panel(
                    f"[bold]–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ {i+1}/{len(posts)}...[/bold]\n"
                    f"[dim]–ü–æ—Å—Ç: {post['title'][:60]}...[/dim]",
                    title="üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å"
                ))
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ—Å—Ç
                start_time = time.time()
                result = await classifier.classify_post(post)
                end_time = time.time()
                
                processed_count += 1
                if result.get("is_spam"):
                    spam_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                results.append((post, result))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                results_content = ""
                for p, r in results[-3:]:
                    status = "üö´ –°–ü–ê–ú" if r.get("is_spam") else "‚úÖ OK"
                    confidence = r.get("confidence", 0)
                    processing_time = r.get("processing_time_ms", 0)
                    
                    results_content += f"""
üìù [bold]{p['title'][:40]}...[/bold]
   {status} ({confidence:.1%} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, {processing_time:.1f}ms)
   {', '.join(p['tag_list'][:3])} | {p['reading_time_minutes']}–º–∏–Ω | {p['public_reactions_count']}üëç
"""
                
                layout["results"].update(Panel(
                    results_content.strip(),
                    title="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    border_style="green"
                ))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_stats = await classifier.get_stats()
                layout["stats"].update(create_stats_panel(current_stats, processed_count, spam_count))
                
                # –ü–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                await asyncio.sleep(1.5)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            layout["footer"].update(Panel(
                f"[bold green]‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞![/bold green]\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –ø–æ—Å—Ç–æ–≤\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–º–∞: {spam_count} ({spam_count/processed_count*100:.1f}%)\n"
                f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {sum(r.get('confidence', 0) for _, r in results)/len(results):.1%}",
                title="üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            ))
            
            console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/dim]")
            input()

async def run_batch_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    console.clear()
    console.print(Panel.fit(
        "[bold blue]‚ö° –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤[/bold blue]",
        border_style="blue"
    ))
    
    async with DemoSpamClassifier() as classifier:
        posts = classifier.get_demo_posts()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        batch_request = {
            "posts": posts,
            "threshold": 0.8
        }
        
        with console.status("[bold green]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è..."):
            start_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch –∑–∞–ø—Ä–æ—Å
            async with classifier.session.post(
                f"{classifier.api_url}/classify-batch",
                json=batch_request
            ) as response:
                if response.status == 200:
                    batch_results = await response.json()
                    end_time = time.time()
                else:
                    console.print(f"[red]–û—à–∏–±–∫–∞: HTTP {response.status}[/red]")
                    return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        processing_time = (end_time - start_time) * 1000
        
        table = Table(title=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({processing_time:.1f}ms)")
        table.add_column("ID", justify="center")
        table.add_column("–ó–∞–≥–æ–ª–æ–≤–æ–∫", min_width=30)
        table.add_column("–°—Ç–∞—Ç—É—Å", justify="center")
        table.add_column("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", justify="center")
        table.add_column("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", justify="center")
        
        spam_count = 0
        for result in batch_results["results"]:
            post = next(p for p in posts if p["id"] == result["post_id"])
            
            status = "üö´ –°–ü–ê–ú" if result["is_spam"] else "‚úÖ OK"
            status_color = "red" if result["is_spam"] else "green"
            
            if result["is_spam"]:
                spam_count += 1
            
            table.add_row(
                str(result["post_id"]),
                post["title"][:40] + "..." if len(post["title"]) > 40 else post["title"],
                f"[{status_color}]{status}[/{status_color}]",
                f"{result['confidence']:.1%}",
                result["recommendation"].upper()
            )
        
        console.print(table)
        console.print(f"\n[bold]–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:[/bold]")
        console.print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        console.print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–ø–∞–º–∞: {spam_count}")
        console.print(f"‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}ms")
        console.print(f"‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {len(posts)/(processing_time/1000):.1f} –ø–æ—Å—Ç–æ–≤/—Å–µ–∫")
        
        console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/dim]")
        input()

async def run_performance_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    console.clear()
    console.print(Panel.fit(
        "[bold blue]‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏[/bold blue]",
        border_style="blue"
    ))
    
    async with DemoSpamClassifier() as classifier:
        test_post = classifier.get_demo_posts()[0]
        
        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        console.print("[bold]üîç –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...[/bold]")
        
        times = []
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            transient=True,
        ) as progress:
            task = progress.add_task("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç...", total=50)
            
            for i in range(50):
                start_time = time.time()
                result = await classifier.classify_post(test_post)
                end_time = time.time()
                
                if not result.get("error"):
                    times.append((end_time - start_time) * 1000)
                
                progress.update(task, advance=1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        table = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="bold")
        table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", justify="right")
        
        table.add_row("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", "50")
        table.add_row("–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", str(len(times)))
        table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_time:.1f}ms")
        table.add_row("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", f"{min_time:.1f}ms")
        table.add_row("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è", f"{max_time:.1f}ms")
        table.add_row("–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", f"{1000/avg_time:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        console.print(table)
        
        # –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        console.print("\n[bold]üöÄ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...[/bold]")
        
        async def classify_concurrent(post, semaphore):
            async with semaphore:
                start_time = time.time()
                result = await classifier.classify_post(post)
                end_time = time.time()
                return (end_time - start_time) * 1000 if not result.get("error") else None
        
        semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        with console.status("[bold green]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤..."):
            start_total = time.time()
            tasks = [classify_concurrent(test_post, semaphore) for _ in range(100)]
            concurrent_times = await asyncio.gather(*tasks)
            end_total = time.time()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        successful_times = [t for t in concurrent_times if t is not None]
        total_time = (end_total - start_total) * 1000
        
        table2 = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
        table2.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="bold")
        table2.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", justify="right")
        
        table2.add_row("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", "100")
        table2.add_row("–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", str(len(successful_times)))
        table2.add_row("–û–±—â–µ–µ –≤—Ä–µ–º—è", f"{total_time:.1f}ms")
        table2.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å", f"{sum(successful_times)/len(successful_times):.1f}ms")
        table2.add_row("–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", f"{len(successful_times)/(total_time/1000):.1f} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
        
        console.print(table2)
        
        console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/dim]")
        input()

def show_main_menu():
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    console.clear()
    
    title = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    üõ°Ô∏è Redis8 Spam Guard                 ‚ïë
    ‚ïë              –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞          ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    
    console.print(title, style="bold blue")
    
    console.print("\n[bold]–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:[/bold]")
    console.print("‚Ä¢ üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    console.print("‚Ä¢ ‚ö° Redis 8 Vector Sets –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    console.print("‚Ä¢ üöÄ FastAPI –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ API")
    console.print("‚Ä¢ üéØ Real-time –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤ dev.to")
    console.print("‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
    
    console.print("\n[bold]–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:[/bold]")
    console.print("1. üé≠ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
    console.print("2. ‚ö° –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    console.print("3. üìà –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    console.print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã")
    console.print("5. üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    console.print("0. üö™ –í—ã—Ö–æ–¥")
    
    return input("\n[bold blue]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-5): [/bold blue]")

def show_architecture():
    """–ü–æ–∫–∞–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã"""
    console.clear()
    
    architecture = """
[bold blue]üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã[/bold blue]

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Dev.to API    ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  FastAPI Server  ‚îÇ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Redis 8        ‚îÇ
‚îÇ                 ‚îÇ    ‚îÇ                  ‚îÇ    ‚îÇ  Vector Sets    ‚îÇ
‚îÇ  ‚Ä¢ Posts        ‚îÇ    ‚îÇ  ‚Ä¢ Classification‚îÇ    ‚îÇ  ‚Ä¢ Embeddings   ‚îÇ
‚îÇ  ‚Ä¢ Metadata     ‚îÇ    ‚îÇ  ‚Ä¢ Batch API     ‚îÇ    ‚îÇ  ‚Ä¢ k-NN Search  ‚îÇ
‚îÇ  ‚Ä¢ Real-time    ‚îÇ    ‚îÇ  ‚Ä¢ WebUI         ‚îÇ    ‚îÇ  ‚Ä¢ Persistence  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                              ‚îÇ
                       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                       ‚îÇ  Web Interface   ‚îÇ
                       ‚îÇ                  ‚îÇ
                       ‚îÇ  ‚Ä¢ Live Demo     ‚îÇ
                       ‚îÇ  ‚Ä¢ Statistics    ‚îÇ
                       ‚îÇ  ‚Ä¢ Moderator UI  ‚îÇ
                       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

[bold]üîÑ –ü—Ä–æ—Ü–µ—Å—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:[/bold]

1. üì• [green]–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞[/green] - API –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
2. üßπ [yellow]–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞[/yellow] - –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
3. üß† [blue]–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è[/blue] - Sentence Transformers ‚Üí 384D –≤–µ–∫—Ç–æ—Ä
4. üîç [purple]–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö[/purple] - Redis Vector Sets k-NN –ø–æ–∏—Å–∫
5. üéØ [red]–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è[/red] - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
6. üìä [green]–†–µ–∑—É–ª—å—Ç–∞—Ç[/green] - —Å–ø–∞–º/–Ω–µ —Å–ø–∞–º + —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

[bold]‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:[/bold]

‚Ä¢ [bold blue]Backend:[/bold blue] Python 3.11, FastAPI, AsyncIO
‚Ä¢ [bold red]Database:[/bold red] Redis 8 —Å Vector Sets –º–æ–¥—É–ª–µ–º
‚Ä¢ [bold green]ML:[/bold green] Sentence Transformers, scikit-learn
‚Ä¢ [bold yellow]Frontend:[/bold yellow] HTML5, JavaScript, Rich Console
‚Ä¢ [bold purple]DevOps:[/bold purple] Docker, Docker Compose, Nginx

[bold]üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:[/bold]

‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ~50ms –Ω–∞ –∑–∞–ø—Ä–æ—Å
‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: 1000+ –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫
‚Ä¢ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫: <10ms –≤ Redis
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ~94% (F1-score)
"""
    
    console.print(Panel(architecture, border_style="blue"))
    console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...[/dim]")
    input()

def show_technical_info():
    """–ü–æ–∫–∞–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    console.clear()
    
    technical = """
[bold blue]üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/bold blue]

[bold]üìä –ê–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:[/bold]

1. [bold yellow]Feature Engineering:[/bold yellow]
   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: title + description ‚Üí SentenceTransformer
   ‚Ä¢ –ß–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: reading_time, reactions, comments, followers
   ‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ 389D –≤–µ–∫—Ç–æ—Ä

2. [bold green]Vector Search:[/bold green]
   ‚Ä¢ Redis VSET.ADD –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤
   ‚Ä¢ Redis VSET.SEARCH –¥–ª—è –ø–æ–∏—Å–∫–∞ k=5 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
   ‚Ä¢ Cosine similarity –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

3. [bold red]Classification:[/bold red]
   ‚Ä¢ Weighted k-NN voting –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–æ—Å–µ–¥—è–º
   ‚Ä¢ Confidence score –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å–æ—Å–µ–¥–µ–π
   ‚Ä¢ Fallback –Ω–∞ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

[bold]üéØ –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:[/bold]

‚Ä¢ [red]–°–ø–∞–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:[/red]
  - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "earn money", "get rich", "click here"
  - –ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ—Å—Ç—ã (<2 –º–∏–Ω) —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (<5 —Ä–µ–∞–∫—Ü–∏–π)
  - –ú–Ω–æ–≥–æ —Ç–µ–≥–æ–≤ (>10) –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
  - –ù–æ–≤—ã–µ –∞–≤—Ç–æ—Ä—ã (<10 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)

‚Ä¢ [green]–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:[/green]
  - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: "tutorial", "guide", "how to"
  - –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (>50 —Ä–µ–∞–∫—Ü–∏–π, >10 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
  - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (8-15 –º–∏–Ω—É—Ç —á—Ç–µ–Ω–∏—è)
  - –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã (>100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)

[bold]‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:[/bold]

‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å asyncio –∏ aioredis
‚Ä¢ Batch processing –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ Connection pooling –¥–ª—è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ Lazy loading –º–æ–¥–µ–ª–µ–π Sentence Transformers

[bold]üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:[/bold]

‚Ä¢ Rate limiting –Ω–∞ API endpoints
‚Ä¢ Input validation —Å Pydantic
‚Ä¢ Error handling –∏ graceful degradation
‚Ä¢ Health checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ Horizontal scaling —á–µ—Ä–µ–∑ Docker Swarm/K8s

[bold]üìè –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:[/bold]

‚Ä¢ Precision: –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∞–º–∞
‚Ä¢ Recall: –¥–æ–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∞–º–∞ –æ—Ç –≤—Å–µ–≥–æ —Å–ø–∞–º–∞
‚Ä¢ F1-Score: –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ precision –∏ recall
‚Ä¢ Accuracy: –æ–±—â–∞—è –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
‚Ä¢ Processing Time: –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
"""
    
    console.print(Panel(technical, border_style="green"))
    console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...[/dim]")
    input()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    console.print("[bold green]üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...[/bold green]")
    
    while True:
        try:
            choice = show_main_menu()
            
            if choice == "1":
                await run_interactive_demo()
            elif choice == "2":
                await run_batch_demo()
            elif choice == "3":
                await run_performance_demo()
            elif choice == "4":
                show_architecture()
            elif choice == "5":
                show_technical_info()
            elif choice == "0":
                console.print("\n[bold blue]üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ![/bold blue]")
                console.print("[dim]–£–¥–∞—á–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ! üèÜ[/dim]")
                break
            else:
                console.print("[red]‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/red]")
                time.sleep(1)
                
        except KeyboardInterrupt:
            console.print("\n[yellow]‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
            break
        except Exception as e:
            console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {e}[/red]")
            console.print("[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...[/dim]")
            input()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[bold blue]üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/bold blue]")
    except Exception as e:
        console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        sys.exit(1)
